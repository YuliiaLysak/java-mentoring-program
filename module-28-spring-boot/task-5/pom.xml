<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>module-28-spring-boot</artifactId>
        <groupId>edu.lysak</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>task-5</artifactId>

    <properties>
        <flyway.version>8.5.12</flyway.version>
        <postgresql.version>42.3.3</postgresql.version>
        <thymeleaf-springsecurity5.version>3.0.4.RELEASE</thymeleaf-springsecurity5.version>
        <liquibase.version>4.11.0</liquibase.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!--connection to database-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!--database migration-->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${liquibase.version}</version>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- Thymeleaf (html pages template)-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!-- for security tags in html, eg sec:authorize="isAnonymous()"-->
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity5</artifactId>
            <version>${thymeleaf-springsecurity5.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>31.1-jre</version>
        </dependency>


        <!-- Other -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>5.6.5</version>
            <scope>test</scope>
        </dependency>


<!--        com.fasterxml.jackson.databind.exc.InvalidDefinitionException:
            Java 8 date/time type `java.time.LocalDateTime` not supported by default:
            add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling-->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.13.2</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- plugin for running app via command line using 'java -jar ...' -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.5</version>
                <configuration>
                    <mainClass>edu.lysak.recipes.RecipesApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- plugin for building Docker image -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <configuration>
                    <imageName>recipes</imageName>
                    <baseImage>openjdk:17</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <forceTags>true</forceTags>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>

            <!-- another plugin for building Docker image -->
            <!-- run 'mvn package' to build docker image -->
            <!-- run 'mvn install' to start docker container -->
<!--            <plugin>-->
<!--                <groupId>io.fabric8</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>0.40.1</version>-->
<!--                <configuration>-->
<!--                    <images>-->
<!--                        <image>-->
<!--                            <name>recipes2</name>-->
<!--                            <build>-->
<!--                                <from>openjdk:17</from>-->
<!--                                <assembly>-->
<!--                                    <descriptorRef>artifact</descriptorRef>-->
<!--                                </assembly>-->
<!--                                <cmd>java -jar maven/${project.name}-${project.version}.jar</cmd>-->
<!--                            </build>-->
<!--                        </image>-->
<!--                    </images>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>docker:build</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                    <execution>-->
<!--                        <id>docker:start</id>-->
<!--                        <phase>install</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                            <goal>logs</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

            <!-- plugin for flyway, e.g using maven commands, such as:
             'mvn flyway:info -Dflyway.user=${DATASOURCE_USERNAME} -Dflyway.password=${DATASOURCE_PASSWORD}'
             'mvn flyway:repair -Dflyway.user=${DATASOURCE_USERNAME} -Dflyway.password=${DATASOURCE_PASSWORD}'
              etc -->
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>${flyway.version}</version>
                <configuration>
                    <url>jdbc:postgresql://localhost:5432/mentoring_recipes_db</url>
                </configuration>
            </plugin>

            <!-- plugin for liquibase, e.g. using maven commands, such as:
             'mvn liquibase:generateChangeLog -Dmaven.test.skip=true'
             'mvn liquibase:diff -Dmaven.test.skip=true'-->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>${liquibase.version}</version>
                <configuration>
                    <verbose>true</verbose>
                    <url>jdbc:postgresql://localhost:5432/mentoring_recipes_db</url>
                    <changeLogFile>src/main/resources/db/changelog/db.changelog-master.yaml</changeLogFile>
                    <outputChangeLogFile>${project.basedir}/src/main/resources/db/changelog/db.changelog-init.yaml</outputChangeLogFile>
                    <diffChangeLogFile>${project.basedir}/src/main/resources/db/changelog/db.changelog-diff.yaml</diffChangeLogFile>
                    <migrationSqlOutputFile>${project.basedir}/src/main/resources/db/changelog/migration.sql</migrationSqlOutputFile>
                    <logging>debug</logging>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>